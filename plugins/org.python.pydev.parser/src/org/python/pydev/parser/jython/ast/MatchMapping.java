// Autogenerated AST node
package org.python.pydev.parser.jython.ast;

import org.python.pydev.parser.jython.SimpleNode;
import java.util.Arrays;

public final class MatchMapping extends patternType {
    public patternType[] keyValues;
    public exprType rest;

    public MatchMapping(patternType[] keyValues, exprType rest) {
        this.keyValues = keyValues;
        this.rest = rest;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + Arrays.hashCode(keyValues);
        result = prime * result + ((rest == null) ? 0 : rest.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;
        MatchMapping other = (MatchMapping) obj;
        if (!Arrays.equals(keyValues, other.keyValues)) return false;
        if (rest == null) { if (other.rest != null) return false;}
        else if (!rest.equals(other.rest)) return false;
        return true;
    }
    @Override
    public MatchMapping createCopy() {
        return createCopy(true);
    }
    @Override
    public MatchMapping createCopy(boolean copyComments) {
        patternType[] new0;
        if(this.keyValues != null){
        new0 = new patternType[this.keyValues.length];
        for(int i=0;i<this.keyValues.length;i++){
            new0[i] = (patternType) (this.keyValues[i] != null?
            this.keyValues[i].createCopy(copyComments):null);
        }
        }else{
            new0 = this.keyValues;
        }
        MatchMapping temp = new MatchMapping(new0,
        rest!=null?(exprType)rest.createCopy(copyComments):null);
        temp.beginLine = this.beginLine;
        temp.beginColumn = this.beginColumn;
        if(this.specialsBefore != null && copyComments){
            for(Object o:this.specialsBefore){
                if(o instanceof commentType){
                    commentType commentType = (commentType) o;
                    temp.getSpecialsBefore().add(commentType.createCopy(copyComments));
                }
            }
        }
        if(this.specialsAfter != null && copyComments){
            for(Object o:this.specialsAfter){
                if(o instanceof commentType){
                    commentType commentType = (commentType) o;
                    temp.getSpecialsAfter().add(commentType.createCopy(copyComments));
                }
            }
        }
        return temp;
    }

    @Override
    public String toString() {
        StringBuffer sb = new StringBuffer("MatchMapping[");
        sb.append("keyValues=");
        sb.append(dumpThis(this.keyValues));
        sb.append(", ");
        sb.append("rest=");
        sb.append(dumpThis(this.rest));
        sb.append("]");
        return sb.toString();
    }

    @Override
    public Object accept(VisitorIF visitor) throws Exception {
        return visitor.visitMatchMapping(this);
    }

    @Override
    public void traverse(VisitorIF visitor) throws Exception {
        if (keyValues != null) {
            for (int i = 0; i < keyValues.length; i++) {
                if (keyValues[i] != null) {
                    keyValues[i].accept(visitor);
                }
            }
        }
        if (rest != null) {
            rest.accept(visitor);
        }
    }

}
