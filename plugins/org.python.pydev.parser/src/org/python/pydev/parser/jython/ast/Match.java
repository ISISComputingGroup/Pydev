// Autogenerated AST node
package org.python.pydev.parser.jython.ast;

import org.python.pydev.parser.jython.SimpleNode;
import java.util.Arrays;

public final class Match extends stmtType {
    public exprType subject;
    public match_caseType[] cases;

    public Match(exprType subject, match_caseType[] cases) {
        this.subject = subject;
        this.cases = cases;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((subject == null) ? 0 : subject.hashCode());
        result = prime * result + Arrays.hashCode(cases);
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;
        Match other = (Match) obj;
        if (subject == null) { if (other.subject != null) return false;}
        else if (!subject.equals(other.subject)) return false;
        if (!Arrays.equals(cases, other.cases)) return false;
        return true;
    }
    @Override
    public Match createCopy() {
        return createCopy(true);
    }
    @Override
    public Match createCopy(boolean copyComments) {
        match_caseType[] new0;
        if(this.cases != null){
        new0 = new match_caseType[this.cases.length];
        for(int i=0;i<this.cases.length;i++){
            new0[i] = (match_caseType) (this.cases[i] != null?
            this.cases[i].createCopy(copyComments):null);
        }
        }else{
            new0 = this.cases;
        }
        Match temp = new Match(subject!=null?(exprType)subject.createCopy(copyComments):null, new0);
        temp.beginLine = this.beginLine;
        temp.beginColumn = this.beginColumn;
        if(this.specialsBefore != null && copyComments){
            for(Object o:this.specialsBefore){
                if(o instanceof commentType){
                    commentType commentType = (commentType) o;
                    temp.getSpecialsBefore().add(commentType.createCopy(copyComments));
                }
            }
        }
        if(this.specialsAfter != null && copyComments){
            for(Object o:this.specialsAfter){
                if(o instanceof commentType){
                    commentType commentType = (commentType) o;
                    temp.getSpecialsAfter().add(commentType.createCopy(copyComments));
                }
            }
        }
        return temp;
    }

    @Override
    public String toString() {
        StringBuffer sb = new StringBuffer("Match[");
        sb.append("subject=");
        sb.append(dumpThis(this.subject));
        sb.append(", ");
        sb.append("cases=");
        sb.append(dumpThis(this.cases));
        sb.append("]");
        return sb.toString();
    }

    @Override
    public Object accept(VisitorIF visitor) throws Exception {
        return visitor.visitMatch(this);
    }

    @Override
    public void traverse(VisitorIF visitor) throws Exception {
        if (subject != null) {
            subject.accept(visitor);
        }
        if (cases != null) {
            for (int i = 0; i < cases.length; i++) {
                if (cases[i] != null) {
                    cases[i].accept(visitor);
                }
            }
        }
    }

}
